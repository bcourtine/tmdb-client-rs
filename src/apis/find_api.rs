/*
 * API
 *
 * ## Welcome  This is a place to put general notes and extra information, for internal use.  To get started designing/documenting this API, select a version on the left. # Title No Description
 *
 * The version of the OpenAPI document: 3
 *
 * Generated by: https://openapi-generator.tech
 */

use std::option::Option;
use std::rc::Rc;
use std::borrow::Borrow;

use reqwest;

use super::{configuration, urlencode, Error};

pub struct FindApiClient<T: crate::apis::configuration::HttpClient + 'static> {
    configuration: Rc<configuration::Configuration<T>>,
}

impl <T: crate::apis::configuration::HttpClient + 'static> FindApiClient<T> {
    pub fn new(configuration: Rc<configuration::Configuration<T>>) -> FindApiClient<T> {
        FindApiClient {
            configuration,
        }
    }
}

pub trait FindApi {
    fn get_find_external_id(
        &self,
        external_id: &str,
        external_source: &str,
        language: Option<&str>,
    ) -> Result<crate::models::FindByExternalIdResults, Error>;
}

impl <T: crate::apis::configuration::HttpClient + 'static> FindApi for FindApiClient<T> {
    fn get_find_external_id(
        &self,
        external_id: &str,
        external_source: &str,
        language: Option<&str>,
    ) -> Result<crate::models::FindByExternalIdResults, Error> {
        let configuration: &configuration::Configuration<T> = self.configuration.borrow();
        let mut client = configuration.inner_client_guard();

        let uri_str = format!(
            "{}/find/{external_id}",
            configuration.base_path,
            external_id = urlencode(external_id)
        );
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("external_source", &external_source.to_string())]);
        if let Some(ref s) = language {
            req_builder = req_builder.query(&[("language", &s.to_string())]);
        }
        if let Some(ref apikey) = configuration.api_key {
            req_builder = req_builder.query(&[("api_key", apikey)]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }
}
